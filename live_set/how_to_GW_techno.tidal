-- HOW TO transfrom simple, and rather dull, GW raw signals into a techno track

-- Four2theFloor

d1 $ fast 1
  $ s "gw_cut:1*4"
  # speed "-1"
  # gain "1 0.8 1 0.9"
  -- # room 0.1


hush

-- fast background
d2 $ fast 4
  $ n "0 1 1 0"
  # s "gw_cut"
  # grain 0.5 0.1
  # lpf 300
  # gain 1.2
  -- # squiz 6 -- some spice
  # vowel "a"
  -- # sustain "<0.03 0.02 0.02>" -- some spice
  # pan perlin

hush



-- characteristic driver of the track!
d3 $ jux rev 
  $ fast 4
  $ degradeBy 0
  $ slice 6 "6 2 1 3"
  -- $ sometimes (swingBy (1/2) 2)
  $ n "4 1 3 2"
  # s "gw_cut(6,8)"
  -- # speed "1.4 1 2 1"
  # speed 1.4
  -- # shape "0.8" -- !!! adjust GAIN down!
  -- # hpf "800 400"
  -- # lpf 3500
  # legato 1
  # djf (slow 8 $ range 0.45 0.75 sine)
  # fshift "<-38 90>"
  -- # waveloss "23 45 87 10 6 64"
  # pan perlin
  -- # comb "0.03 0.04"
  -- # vowel "a u [i|e]"
  # squiz "3 6 4 1"
  -- # smear "<0.5 4 0.8 3>"
  -- # gain (slow 2 $ range 0.9 1.2 sine)
  # gain 1



--- we need a synth line here! a more complex sound
d4 $ chop 1
  $ s ("gw_cut:2(5,16)" <> "gw_cut:3(11,16)")
  # speed "[-45 -23 -56]"
  -- # squiz "3 5 1 4"
  -- # waveloss "10 .. 60"
  -- # hpf 800
  -- # comb "0.3 0.5 0.4"
  # gain 0.8

hush

-- MAYBE
-- weave a bit thicker here in order to build up towards a BREAK
-- myterious = switch on and of
d8 $ fast 0.5
  $ slice 6 pat'
  $ grain 0.55 0.06 # s "gw_cut:8 gw_cut:8"
  # smear "0.3 .. 0.7"
  # speed "-1.0 <-0.4 -1.4>"
  -- # pan perlin
  # dry 0.2 # room 0.7 # sz 0.85
  # gain 1

hush






-- > DEF of some helper functions

-- grab some interesting integer sequences here e.g. OEIS
-- list_euler = A000010
-- list_fractal = A025480
-- list_grav = A353769
let list_euler = [1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8, 8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28, 8, 30, 16]
    list_fractal = [0, 0, 1, 0, 2, 1, 3, 0, 4, 2, 5, 1, 6, 3, 7, 0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15, 0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 23, 1, 24, 12, 25, 6, 26, 13, 27, 3, 28, 14, 29, 7, 30, 15, 31, 0, 32, 16, 33, 8, 34, 17, 35, 4, 36, 18, 37, 9, 38, 19, 39, 2, 40, 20, 41, 10]
    list_grav = [6, 4, 9, 2, 2, 4, 1, 4, 4, 5, 6, 4, 5, 9, 1, 2, 6, 4, 7, 1, 2, 4, 7, 4, 7, 4, 2, 4, 4, 6, 6, 8, 2, 0, 3, 1, 5, 3, 5, 9, 5, 0, 1, 6, 4, 6, 9, 1, 0, 4, 1, 9, 3, 1, 3, 4, 8, 7, 8, 0, 0, 3, 3, 4, 0, 3, 3, 2, 2, 1, 2, 8, 6, 1, 7, 1, 1, 1, 5, 9, 9, 4, 3, 1, 3, 1, 4, 4, 2, 9, 8, 3, 8, 6, 5, 2, 6, 4, 0, 8, 2, 9, 9, 0, 0]



-- defs of some very simple list manipulation
reOrgList n x = drop n x ++ take n x
maskPat l x = take l x
maskPat' o l x = take l (drop o x)


-- short-hand for using it while playing live
let a = reOrgList 6 list_grav
    pat = listToPat (maskPat 8 a)
    pat' = listToPat (reverse (maskPat 8 a))
